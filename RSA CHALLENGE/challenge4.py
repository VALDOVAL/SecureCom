## Commands to generate keys with openssl from commandline.. not part of this pythonj code.
## openssl genrsa -out mykey.pem
## openssl rsa -in mykey.pem -pubout > mykey.pub
## -------------------------------------------------------------------------
## To run type python rsa.py from the commandline (assuming you've pythonh installed

"""
This code attempts to find the n e d values of the rsa private  key
"""
#import library
import binascii
# import RSA libary
from Crypto.PublicKey import RSA


def string2int(my_str): # method to convert String to integer
    return int(binascii.hexlify(my_str), 16) #return converted String


def int2string(my_int):# method to convert interger to String
    return binascii.unhexlify(format(my_int, "x").encode("utf-8")).decode("utf-8") #returning binary ascii code passing in an integer

# -------------------------------------------------------------------------
n = 23516695565660963250242846975094031309572348962900032827958534374248114661507001374384417953124930587796472484525315334716723068326965228898857733318407681656604325744994115789416012096318656034667361976251100005599211469354510367804546831680730445574797161330145320706346512982316782618118878428893337849886890813813050423818145497040676697510093220374542784895778086554812954376689653727580227087363619223145837820593375994747273662064715654881379557354513619477314410917942381406981452545764657853425675230343749326640073923166795823683203941972393206970228647854927797483660176460658959810390117898333516129469397
e = 65537
d = 9587600726595591453426898215169101767863399178169979967502694355028996988583633210586039386751682566723132708455252764519220038491664005843242439790264046968625524201298469258242007220372280857992847470031480553726983707671745159488070659256258857978134570602562717609180653377092666963295822401721181836384326336158085408894694549470434424808812412260714422693522311366681659987060925945689943522825747715934700712908720597323076354591388316712970722935035250113120539406041972135508540472211484760814740089404942374666334486855389174327639061106567747152104666795257954039030591097174242386069752606041990644663125
p = 170436857437540785902894247445629309884819493988198726337160363787266132388801445377172350883259146330710518633323153950488107255453274647690833952071079266615535462115718628529996080297946386916054952930963525522668498855400580516951309863503734146131687670337990358661269686138903141878297721385390421204703
q = 137978932017559751745702136624874154954496829862527332457067512249687998333117572719846957168595861866495967632464915097378576596911015571165340454225721218087595428364080801400548238088288742249145662369868461078198744980520572785232341389134600070345564258064842348774203427257497319140459851255774165194699



file_private_key = open("mykey3","r") # given rsa file read into variable
binPrivateKey = RSA.importKey(file_private_key) # keys read from given private rsa private key

print(binPrivateKey.n) # extracting value of n and printing it out
print("space")
print(binPrivateKey.e) # extracting value of e and printing it out
print("space")
print(binPrivateKey.d) # extracting value of d and printing it out

ciphertext = 474862643754336865489984490773307542016161159436213530034995807183836312346778617047666360854948178434525541089212091928949344492697684657497682106740050084305554758259427768463395264318566101255923490595579348647860471822284428834756812967844672795316325109976652375135659724572710513755433401072885408968307124213606768098411795080747616961236626790699862671834311406129266854138764009952421206625693567227556664511584573464971029270576495696636132292906861410359486612705079004947333371264698887189359265840678094723729950785568382017843975809503403984016678927664449791524785943376314787680072596720311587221852 ## b before the string to says its a byte string
## --------------------------------------------------------------------------

## ----- convert message to an int then encrypt ------------
# m = string2int(message)
# ciphertext = pow(m, e, n) # encrypt
# print (ciphertext)
## ----- decrypt cuphertext then convert number back to a string

decrypted = pow(ciphertext, binPrivateKey.d, binPrivateKey.n)  # decrypting using the pow decryption method
plaintext = int2string(decrypted) # decrypted message converted and pass into plaintext
print (plaintext) # decrypted message converted and pass into plaintext








